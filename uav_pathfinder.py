# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# temp.py
# Created on: 2015-02-09 22:53:47.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo

# Import arcpy module
print "Importing modules ..."
import arcpy, os, json

# Load Settings file
print "Loading settings ..."
with open('settings.txt', 'r') as jsonfile:
    settings = json.loads(jsonfile.read())

# Setting Environment Variables
print "Setting environment variables ... "
arcpy.CheckOutExtension("spatial")
arcpy.env.snapRaster = ""
arcpy.env.extent = "DEFAULT"
arcpy.env.overwriteOutput = True

# Setting Input Variables
print "Setting input variables ..."
pipelines = os.path.join(settings['features_path'], settings['pipelines_file'])
pipeline_buffer_dist = "1 Kilometers"
pickup_point = os.path.join(settings['features_path'], settings['pickup_file'])
Destination_field = "FID"
railyway_buffer_dist = "1 Kilometers"
railways = os.path.join(settings['features_path'], settings['railways_file'])
start_point = os.path.join(settings['features_path'], settings['start_file'])
dem_west = "C:\\Users\\Trevor\\Documents\\ArcGIS\\Projects\\Model Builder Project\\data\\dem\\021l14_0200_demw.dem"
dem_east = "C:\\Users\\Trevor\\Documents\\ArcGIS\\Projects\\Model Builder Project\\data\\dem\\021l14_0200_deme.dem"
temp = settings['temp_path']
roads = os.path.join(settings['features_path'], settings['roads_file'])
road_buffer_dist = "0.1 Kilometers"
dropoff_point = os.path.join(settings['features_path'], settings['dropoff_file'])

# Setting Temporary Variables
print "Setting temporary Variables ..."
pipeline_buffer_shp = os.path.join(settings['temp_path'], "pipeline_buffer.shp")
dropoff_as_pt_shp = os.path.join(settings['temp_path'], 'dropoff_as_pt.shp')
pipeline_rast = os.path.join(settings['temp_path'], 'pipeline_rast')
start_as_pt_shp = os.path.join(settings['temp_path'], 'start_as_pt.shp')
weighted_over = os.path.join(settings['temp_path'], 'weighted_over')
cost_dist = os.path.join(settings['temp_path'], 'cost_dist')
cost_backlink = os.path.join(settings['temp_path'], 'cost_backlink')
cost_path = os.path.join(settings['temp_path'], 'cost_path')
rail_buffer_shp = os.path.join(settings['temp_path'], 'rail_buffer.shp')
rail_rast = os.path.join(settings['temp_path'], 'rail_rast')
dem_mosaic = os.path.join(settings['temp_path'], 'dem_mosaic')
dem_reclass = os.path.join(settings['temp_path'], 'dem_reclass')
road_buffer_shp = os.path.join(settings['temp_path'], 'road_buffer.shp')
road_raster = os.path.join(settings['temp_path'], 'road_raster')
cost_polyline_shp = os.path.join(settings['temp_path'], 'cost_polyline.shp')
polyline_points_shp = os.path.join(settings['temp_path'], 'polyline_points.shp')

# Process: List all silos
for point in arcpy.SearchCursor(pickup_point):
    print(point.getValue('ID'))
    
# Process: Runway to Point
print "Converting runway to point ..."
arcpy.FeatureToPoint_management(start_point, start_as_pt_shp, "CENTROID")

# Process: Lumber Yard to Point
print "Converting dropoffs to points ..."
arcpy.FeatureToPoint_management(dropoff_point, dropoff_as_pt_shp, "CENTROID")
for point in arcpy.SearchCursor(dropoff_point):
    print(point.getValue('ID'))

# Process: Buffer Railways
print "Buffering railyways ..."
arcpy.Buffer_analysis(railways, rail_buffer_shp, railyway_buffer_dist, "FULL", "ROUND", "NONE", "")

# Process: Railway Buffer to Raster
print "Converting railway buffer to raster .." 
arcpy.PolygonToRaster_conversion(rail_buffer_shp, "ATG", rail_rast, "CELL_CENTER", "NONE", "0.00094")

# Process: Buffer Pipelines
print "Buffering pipelines ..."
arcpy.Buffer_analysis(pipelines, pipeline_buffer_shp, pipeline_buffer_dist, "FULL", "ROUND", "NONE", "")

# Process: Pipeline Buffer to Raster
print "Converting pipeline buffer to raster ..."
arcpy.PolygonToRaster_conversion(pipeline_buffer_shp, "ATG", pipeline_rast, "CELL_CENTER", "NONE", "0.001")

# Process: Mosaic To New Raster
print "Generating Mosaic of DEM ..."
arcpy.MosaicToNewRaster_management("'C:\\Users\\Trevor\\Documents\\ArcGIS\\Projects\\Model Builder Project\\data\\dem\\021l14_0200_demw.dem';021l14_0200_deme.dem", temp, "dem_mosaic", "", "8_BIT_UNSIGNED", "", "1", "LAST", "FIRST")

# Process: Reclassify
print "Reclassifying DEM ..."
arcpy.gp.Reclassify_sa(dem_mosaic, "VALUE", "0 47 1;47 116 2;116 175 3;175 221 4;221 272 5;272 329 6;329 392 7;392 473 8;473 641 9;641 65535 10", dem_reclass, "DATA")

# Process: Buffer (3)
print "Buffering roads ..."
arcpy.Buffer_analysis(roads, road_buffer_shp, road_buffer_dist, "FULL", "ROUND", "NONE", "")

# Process: Road Buffer to Raster
print "Converting roads buffer to raster ..."
arcpy.PolygonToRaster_conversion(road_buffer_shp, "ATG", road_raster, "CELL_CENTER", "NONE", "0.001")

# Process: Weighted Overlay
print "Generating weighted overlay ... "
arcpy.gp.WeightedOverlay_sa("('C:\\Users\\Trevor\\Documents\\ArcGIS\\Projects\\Model Builder Project\\temp\\rail_rast' 25 'VALUE' (1 10;NODATA 0); 'C:\\Users\\Trevor\\Documents\\ArcGIS\\Projects\\Model Builder Project\\temp\\pipeline_rast' 25 'VALUE' (1 10;NODATA 0); 'C:\\Users\\Trevor\\Documents\\ArcGIS\\Projects\\Model Builder Project\\temp\\dem_reclass' 25 'VALUE' (1 1; 2 2; 3 3; 4 4; 5 5; 6 6; 7 7; 8 8; 9 9; 10 10;NODATA NODATA); 'C:\\Users\\Trevor\\Documents\\ArcGIS\\Projects\\Model Builder Project\\temp\\road_raster' 25 'VALUE' (1 1;NODATA 0));0 10 1", weighted_over)

# Process: Cost Distance
print "Generating cost distance raster ..."
arcpy.gp.CostDistance_sa(start_as_pt_shp, weighted_over, cost_dist, "", cost_backlink)

# Process: Cost Path
print "Generating cost path ..."
arcpy.gp.CostPath_sa(pickup_point, cost_dist, cost_backlink, cost_path, "EACH_CELL", Destination_field)

# Process: Raster to Polyline
print "Converting Raster to Polyline ..."
arcpy.RasterToPolyline_conversion(cost_path, cost_polyline_shp, "ZERO", "0", "SIMPLIFY", "VALUE")

# Process: Feature Vertices To Points
print "Generating waypoints ... "
arcpy.FeatureVerticesToPoints_management(cost_polyline_shp, polyline_points_shp, "ALL")
